generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NOTE: created and modified by dApp engine
model t_events_100 {
  contract        String
  event_signature String
  name            String
  created_at      DateTime @default(now()) @db.Timestamp(6)
  updated_at      DateTime @default(now()) @db.Timestamp(6)

  @@unique([contract, event_signature])
  @@index([contract], map: "idx_events_100_contract")
  @@index([contract, event_signature], map: "idx_events_100_contract_signature")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
// NOTE: created and modified by dApp engine
model t_logs_100 {
  hash       String   @id
  tx_hash    String
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  nonce      Int
  sender     String
  dest       String
  value      String
  data       Json?
  status     String   @default("success")

  @@index([dest], map: "idx_logs_100_dest")
  @@index([dest, created_at], map: "idx_logs_100_dest_date")
  @@index([tx_hash], map: "idx_logs_100_tx_hash")
}

// NOTE: created and modified by dApp engine
model t_logs_data_100 {
  hash       String   @id
  data       Json?
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  @@index([hash], map: "idx_logs_data_100_hash")
}

// NOTE: created and modified by dApp engine
model t_push_token_100_0x56cc38bda01be6ec6d854513c995f6621ee71229 {
  token      String
  account    String
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  @@unique([token, account], map: "t_push_token_100_0x56cc38bda01be6ec6d854513c9_token_account_key")
  @@index([account], map: "idx_push_100_0x__e71229_account")
  @@index([token, account], map: "idx_push_100_0x__e71229_token_account")
}

// NOTE: created and modified by dApp engine
model t_push_token_100_0x5815e61ef72c9e6107b5c5a05fd121f334f7a7f1 {
  token      String
  account    String
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  @@unique([token, account], map: "t_push_token_100_0x5815e61ef72c9e6107b5c5a05f_token_account_key")
  @@index([account], map: "idx_push_100_0x__f7a7f1_account")
  @@index([token, account], map: "idx_push_100_0x__f7a7f1_token_account")
}

// NOTE: created and modified by dApp engine
model t_sponsors_100 {
  contract   String   @id
  pk         String
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
}

model Members {
  account      String
  contract     String
  username     String  @default("anonymous")
  name         String  @default("Anonymous")
  description  String  @default("this user does not have a profile")
  image        String  @default("https://ipfs.internal.citizenwallet.xyz/QmeuAaXrJBHygzAEHnvw5AKUHfBasuavsX9fU69rdv4mhh")
  image_medium String  @default("https://ipfs.internal.citizenwallet.xyz/QmeuAaXrJBHygzAEHnvw5AKUHfBasuavsX9fU69rdv4mhh")
  image_small  String  @default("https://ipfs.internal.citizenwallet.xyz/QmeuAaXrJBHygzAEHnvw5AKUHfBasuavsX9fU69rdv4mhh")
  token_id     String?

  // Add relations
  sent_transfers     Transfers[]    @relation("SentTransfers")
  received_transfers Transfers[]    @relation("ReceivedTransfers")
  interactions       Interactions[] @relation("MemberInteractions")
  with_interactions  Interactions[] @relation("WithMemberInteractions")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@id([account, contract]) // composite primary key
  @@index([account])
  @@index([contract])
  @@index([account, contract])
  @@map("a_members")
}


model Transfers {
  id            String         @id
  hash          String
  from_account  String
  from_contract String
  to_account    String
  to_contract   String
  value         String         @default("0")
  description   String         @default("")
  status        String         @default("pending")

  // Add relations
  sender       Members        @relation("SentTransfers", fields: [from_account, from_contract], references: [account, contract])
  receiver     Members        @relation("ReceivedTransfers", fields: [to_account, to_contract], references: [account, contract])
  interactions Interactions[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([from_account])
  @@index([from_contract])
  @@index([to_account])
  @@index([to_contract])
  @@index([from_account, from_contract])
  @@index([to_account, to_contract])
  @@map("a_transfers")
}

model Interactions {
  id String @id @default(uuid())

  transfer_id String
  transfer    Transfers @relation(fields: [transfer_id], references: [id])

  account          String
  account_contract String
  with             String
  with_contract    String
  member           Members @relation("MemberInteractions", fields: [account, account_contract], references: [account, contract])
  with_member      Members @relation("WithMemberInteractions", fields: [with, with_contract], references: [account, contract])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("a_interactions")
}
