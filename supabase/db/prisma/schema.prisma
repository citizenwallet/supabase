generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NOTE: create by dApp engine
model t_events_100 {
  contract        String
  event_signature String
  name            String
  created_at      DateTime @default(now()) @db.Timestamp(6)
  updated_at      DateTime @default(now()) @db.Timestamp(6)

  @@unique([contract, event_signature])
  @@index([contract], map: "idx_events_100_contract")
  @@index([contract, event_signature], map: "idx_events_100_contract_signature")
}

// NOTE: create by dApp engine
model t_logs_100 {
  hash       String   @id
  tx_hash    String
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  nonce      Int
  sender     String
  dest       String
  value      String
  data       Json?
  status     String   @default("success")

  @@index([dest], map: "idx_logs_100_dest")
  @@index([dest, created_at], map: "idx_logs_100_dest_date")
  @@index([tx_hash], map: "idx_logs_100_tx_hash")
}

// NOTE: create by dApp engine
model t_logs_data_100 {
  hash       String   @id
  data       Json?
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  @@index([hash], map: "idx_logs_data_100_hash")
}

// NOTE: create by dApp engine
model t_push_token_100_0x56cc38bda01be6ec6d854513c995f6621ee71229 {
  token      String
  account    String
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  @@unique([token, account], map: "t_push_token_100_0x56cc38bda01be6ec6d854513c9_token_account_key")
  @@index([account], map: "idx_push_100_0x__e71229_account")
  @@index([token, account], map: "idx_push_100_0x__e71229_token_account")
}

// NOTE: create by dApp engine
model t_push_token_100_0x5815e61ef72c9e6107b5c5a05fd121f334f7a7f1 {
  token      String
  account    String
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  @@unique([token, account], map: "t_push_token_100_0x5815e61ef72c9e6107b5c5a05f_token_account_key")
  @@index([account], map: "idx_push_100_0x__f7a7f1_account")
  @@index([token, account], map: "idx_push_100_0x__f7a7f1_token_account")
}

// NOTE: create by dApp engine
model t_sponsors_100 {
  contract   String   @id
  pk         String
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
}

model Members {
  account          String   @id
  profile_contract String // primary profile contract address
  username         String   @default("anonymous")
  name             String   @default("Anonymous")
  description      String   @default("this user does not have a profile")
  image            String   @default("https://ipfs.internal.citizenwallet.xyz/QmeuAaXrJBHygzAEHnvw5AKUHfBasuavsX9fU69rdv4mhh")
  image_medium     String   @default("https://ipfs.internal.citizenwallet.xyz/QmeuAaXrJBHygzAEHnvw5AKUHfBasuavsX9fU69rdv4mhh")
  image_small      String   @default("https://ipfs.internal.citizenwallet.xyz/QmeuAaXrJBHygzAEHnvw5AKUHfBasuavsX9fU69rdv4mhh")
  token_id         String?
  created_at       DateTime @default(now())
  updated_at       DateTime @default(now())

  sent_transfers         Transfers[]    @relation("FromAccount")
  received_transfers     Transfers[]    @relation("ToAccount")
  interactions_as_user   Interactions[] @relation("UserInteractions")
  interactions_as_target Interactions[] @relation("TargetInteractions")

  @@map("a_members")
}

model Transfers {
  id             String   @id
  hash           String
  from_account   String
  to_account     String
  token_contract String // primary token contract address
  value          String   @default("0")
  description    String   @default("")
  status         String   @default("pending")
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now())

  sender       Members        @relation("FromAccount", fields: [from_account], references: [account])
  receiver     Members        @relation("ToAccount", fields: [to_account], references: [account])
  interactions Interactions[]

  @@map("a_transfers")
}

model Interactions {
  id              String   @id @default(uuid())
  transfer_id     String
  account         String
  with            String
  new_interaction Boolean  @default(false)
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now())

  transfer Transfers @relation(fields: [transfer_id], references: [id])
  user     Members   @relation("UserInteractions", fields: [account], references: [account])
  target   Members   @relation("TargetInteractions", fields: [with], references: [account])

  @@map("a_interactions")
}
